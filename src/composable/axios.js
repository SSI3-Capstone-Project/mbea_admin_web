import axios from 'axios'
import { useAuthStore } from '@/stores/useAuthStore'
import { useAuth } from '@/composables/useAuth'

const instance = axios.create({
  baseURL: import.meta.env.VITE_API_BASE_URL || '', // ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÉ‡∏ä‡πâ env
  withCredentials: false // ‡∏õ‡∏£‡∏±‡∏ö‡πÄ‡∏õ‡πá‡∏ô true ‡∏ñ‡πâ‡∏≤‡πÉ‡∏ä‡πâ HttpOnly cookie
})

// ‚ûï ‡πÅ‡∏ô‡∏ö access token ‡∏ó‡∏∏‡∏Å request
instance.interceptors.request.use((config) => {
  const auth = useAuthStore()
  const token = auth.accessToken
  if (token) {
    config.headers.Authorization = `Bearer ${token}`
  }
  return config
})

// üîÑ Intercept response ‡πÄ‡∏û‡∏∑‡πà‡∏≠ refresh token
instance.interceptors.response.use(
  (response) => response,
  async (error) => {
    const auth = useAuthStore()

    // ‚úÖ ‡πÄ‡∏â‡∏û‡∏≤‡∏∞ error 401 (Unauthorized) ‡πÅ‡∏•‡∏∞‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà retry
    if (error.response?.status === 401 && !error.config._retry) {
      error.config._retry = true

      try {
        // ‚úÖ refresh access token
        const { refreshAccessToken } = useAuth()
        const success = await refreshAccessToken()

        if (success) {
          // ‚úÖ ‡πÅ‡∏ô‡∏ö token ‡πÉ‡∏´‡∏°‡πà ‡πÅ‡∏•‡πâ‡∏ß retry request ‡πÄ‡∏î‡∏¥‡∏°
          const newToken = auth.accessToken
          error.config.headers.Authorization = `Bearer ${newToken}`
          return instance(error.config)
        } else {
          auth.clearToken()
          window.location.href = '/login' // üëà redirect ‡πÑ‡∏õ login
        }
      } catch (e) {
        auth.clearToken()
        window.location.href = '/login'
      }
    }

    return Promise.reject(error)
  }
)

export default instance
